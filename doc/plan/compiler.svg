<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 3.0.0 (0)
 -->
<!-- Title: Merged Pages: 1 -->
<svg width="266pt" height="567pt"
 viewBox="0.00 0.00 266.00 567.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 563)">
<title>Merged</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-563 262,-563 262,4 -4,4"/>
<!-- Lexer -->
<g id="node1" class="node">
<title>Lexer</title>
<g id="a_node1"><a xlink:href="$class_lexer.html" xlink:title="Lexikai értelmező">
<polygon fill="white" stroke="black" points="0,-336.5 0,-558.5 258,-558.5 258,-336.5 0,-336.5"/>
<text text-anchor="middle" x="129" y="-546.5" font-family="Helvetica,sans-Serif" font-size="10.00">Lexer</text>
<polyline fill="none" stroke="black" points="0,-539.5 258,-539.5 "/>
<text text-anchor="start" x="8" y="-527.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; std::istream &amp; is</text>
<text text-anchor="start" x="8" y="-516.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; std::vector&lt; Token &gt; tokens</text>
<text text-anchor="start" x="8" y="-505.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; std::vector&lt; Token &gt;::iterator currentToken</text>
<text text-anchor="start" x="8" y="-494.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; std::vector&lt; Token &gt;::iterator nextToken</text>
<polyline fill="none" stroke="black" points="0,-487.5 258,-487.5 "/>
<text text-anchor="start" x="8" y="-475.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Lexer(std::istream &amp;_is)</text>
<text text-anchor="start" x="8" y="-464.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Lexer(std::ifstream &amp;_is)</text>
<text text-anchor="start" x="8" y="-453.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ const std::vector&lt; Token &gt; &amp; getTokens() const</text>
<text text-anchor="start" x="8" y="-442.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void operator()()</text>
<text text-anchor="start" x="8" y="-431.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Token &amp; next() const</text>
<text text-anchor="start" x="8" y="-420.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void except(Token t)</text>
<text text-anchor="start" x="8" y="-409.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void consume()</text>
<text text-anchor="start" x="8" y="-398.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Token &amp; current() const</text>
<text text-anchor="start" x="8" y="-387.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ bool eof() const</text>
<text text-anchor="start" x="8" y="-376.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; bool isSingleCharToken(char c) const</text>
<text text-anchor="start" x="8" y="-365.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; bool isTwoCharToken(std::string</text>
<text text-anchor="start" x="8" y="-354.5" font-family="Helvetica,sans-Serif" font-size="10.00">::iterator &amp;it) const</text>
<text text-anchor="start" x="8" y="-343.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; void lexLine(std::string line)</text>
</a>
</g>
</g>
<!-- Compiler -->
<g id="node2" class="node">
<title>Compiler</title>
<g id="a_node2"><a xlink:title="Egy fordítási folyamat reprezentálása.">
<polygon fill="white" stroke="black" points="11,-0.5 11,-288.5 247,-288.5 247,-0.5 11,-0.5"/>
<text text-anchor="middle" x="129" y="-276.5" font-family="Helvetica,sans-Serif" font-size="10.00">Compiler</text>
<polyline fill="none" stroke="black" points="11,-269.5 247,-269.5 "/>
<text text-anchor="start" x="19" y="-257.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; std::istream * is</text>
<text text-anchor="start" x="19" y="-246.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; std::ostream * os</text>
<text text-anchor="start" x="19" y="-235.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; std::ifstream * ifs</text>
<text text-anchor="start" x="19" y="-224.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; std::ofstream * ofs</text>
<text text-anchor="start" x="19" y="-213.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; std::map&lt; const Identifier, Module</text>
<text text-anchor="start" x="19" y="-202.5" font-family="Helvetica,sans-Serif" font-size="10.00"> * &gt; definedModules</text>
<text text-anchor="start" x="19" y="-191.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; std::map&lt; const Identifier, CompilationUnit</text>
<text text-anchor="start" x="19" y="-180.5" font-family="Helvetica,sans-Serif" font-size="10.00"> * &gt; compilationUnits</text>
<polyline fill="none" stroke="black" points="11,-173.5 247,-173.5 "/>
<text text-anchor="start" x="19" y="-161.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Compiler(std::istream &amp;_is, std</text>
<text text-anchor="start" x="19" y="-150.5" font-family="Helvetica,sans-Serif" font-size="10.00">::ostream &amp;_os)</text>
<text text-anchor="start" x="19" y="-139.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Compiler(const char *filename,</text>
<text text-anchor="start" x="19" y="-128.5" font-family="Helvetica,sans-Serif" font-size="10.00"> std::ostream &amp;_os)</text>
<text text-anchor="start" x="19" y="-117.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Compiler(const char *inFilename,</text>
<text text-anchor="start" x="19" y="-106.5" font-family="Helvetica,sans-Serif" font-size="10.00"> const char *outFilename)</text>
<text text-anchor="start" x="19" y="-95.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ ~Compiler()</text>
<text text-anchor="start" x="19" y="-84.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Compiler &amp; operator=(const Compiler &amp;c)</text>
<text text-anchor="start" x="19" y="-73.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void compile()</text>
<text text-anchor="start" x="19" y="-62.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; void lex()</text>
<text text-anchor="start" x="19" y="-51.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; void parse()</text>
<text text-anchor="start" x="19" y="-40.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; void check()</text>
<text text-anchor="start" x="19" y="-29.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; void optimize()</text>
<text text-anchor="start" x="19" y="-18.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; std::string compileBlueprint()</text>
<text text-anchor="start" x="19" y="-7.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; void encode()</text>
</a>
</g>
</g>
<!-- Lexer&#45;&gt;Compiler -->
<g id="edge1" class="edge">
<title>Lexer&#45;&gt;Compiler</title>
<path fill="none" stroke="#404040" d="M129,-336.13C129,-324.67 129,-312.88 129,-301.05"/>
<polygon fill="none" stroke="#404040" points="129,-300.71 125,-294.71 129,-288.71 133,-294.71 129,-300.71"/>
<text text-anchor="middle" x="144.5" y="-310" font-family="Helvetica,sans-Serif" font-size="10.00"> &#45;lexer</text>
</g>
</g>
</svg>
