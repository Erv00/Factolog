<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 3.0.0 (0)
 -->
<!-- Title: TreeNode Pages: 1 -->
<svg width="2401pt" height="1041pt"
 viewBox="0.00 0.00 2401.00 1041.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1037)">
<title>TreeNode</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-1037 2397,-1037 2397,4 -4,4"/>
<!-- Node1 -->
<g id="node1" class="node">
<title>Node1</title>
<g id="a_node1"><a xlink:title="AST alaposztály.">
<polygon fill="#bfbfbf" stroke="black" points="1090.5,-909.5 1090.5,-1032.5 1339.5,-1032.5 1339.5,-909.5 1090.5,-909.5"/>
<text text-anchor="middle" x="1215" y="-1020.5" font-family="Helvetica,sans-Serif" font-size="10.00">TreeNode</text>
<polyline fill="none" stroke="black" points="1090.5,-1013.5 1339.5,-1013.5 "/>
<text text-anchor="middle" x="1215" y="-1001.5" font-family="Helvetica,sans-Serif" font-size="10.00"> </text>
<polyline fill="none" stroke="black" points="1090.5,-994.5 1339.5,-994.5 "/>
<text text-anchor="start" x="1098.5" y="-982.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual std::ostream &amp; printDot</text>
<text text-anchor="start" x="1098.5" y="-971.5" font-family="Helvetica,sans-Serif" font-size="10.00">(std::ostream &amp;os) const =0</text>
<text text-anchor="start" x="1098.5" y="-960.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual void checkSemantics(CompilationUnit</text>
<text text-anchor="start" x="1098.5" y="-949.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;cu) const</text>
<text text-anchor="start" x="1098.5" y="-938.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual ~TreeNode()</text>
<text text-anchor="start" x="1098.5" y="-927.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual EID addToBlueprint(Blueprint</text>
<text text-anchor="start" x="1098.5" y="-916.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;bp) const</text>
</a>
</g>
</g>
<!-- Node2 -->
<g id="node2" class="node">
<title>Node2</title>
<g id="a_node2"><a xlink:href="class_async_expression.html" target="_top" xlink:title="Aszinkron kifejezés.">
<polygon fill="white" stroke="black" points="406,-672.5 406,-795.5 644,-795.5 644,-672.5 406,-672.5"/>
<text text-anchor="middle" x="525" y="-783.5" font-family="Helvetica,sans-Serif" font-size="10.00">AsyncExpression</text>
<polyline fill="none" stroke="black" points="406,-776.5 644,-776.5 "/>
<text text-anchor="middle" x="525" y="-764.5" font-family="Helvetica,sans-Serif" font-size="10.00"> </text>
<polyline fill="none" stroke="black" points="406,-757.5 644,-757.5 "/>
<text text-anchor="start" x="414" y="-745.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual ~AsyncExpression()</text>
<text text-anchor="start" x="414" y="-734.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual void optimize()</text>
<text text-anchor="start" x="414" y="-723.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual AsyncExpression * clone</text>
<text text-anchor="start" x="414" y="-712.5" font-family="Helvetica,sans-Serif" font-size="10.00">() const =0</text>
<text text-anchor="start" x="414" y="-701.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual void translate(const Translator</text>
<text text-anchor="start" x="414" y="-690.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;translation)=0</text>
<text text-anchor="start" x="414" y="-679.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ static AsyncExpression * parse(Lexer &amp;lex)</text>
</a>
</g>
</g>
<!-- Node1&#45;&gt;Node2 -->
<g id="edge1" class="edge">
<title>Node1&#45;&gt;Node2</title>
<path fill="none" stroke="midnightblue" d="M1080.33,-955.48C983.8,-941.96 852.11,-917.03 743,-873 694.4,-853.39 644.69,-822.88 605.03,-795.53"/>
<polygon fill="none" stroke="midnightblue" points="1080.06,-958.98 1090.44,-956.88 1081.01,-952.04 1080.06,-958.98"/>
</g>
<!-- Node6 -->
<g id="node6" class="node">
<title>Node6</title>
<g id="a_node6"><a xlink:href="class_module.html" target="_top" xlink:title="Modul leírása.">
<polygon fill="white" stroke="black" points="752,-650.5 752,-817.5 976,-817.5 976,-650.5 752,-650.5"/>
<text text-anchor="middle" x="864" y="-805.5" font-family="Helvetica,sans-Serif" font-size="10.00">Module</text>
<polyline fill="none" stroke="black" points="752,-798.5 976,-798.5 "/>
<text text-anchor="start" x="760" y="-786.5" font-family="Helvetica,sans-Serif" font-size="10.00"># Identifier * identifier</text>
<text text-anchor="start" x="760" y="-775.5" font-family="Helvetica,sans-Serif" font-size="10.00"># ParameterListDeclaration * parameters</text>
<polyline fill="none" stroke="black" points="752,-768.5 976,-768.5 "/>
<text text-anchor="start" x="760" y="-756.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual ~Module()</text>
<text text-anchor="start" x="760" y="-745.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ const Identifier * getIdentifier() const</text>
<text text-anchor="start" x="760" y="-734.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ const ParameterListDeclaration *</text>
<text text-anchor="start" x="760" y="-723.5" font-family="Helvetica,sans-Serif" font-size="10.00"> getParameters() const</text>
<text text-anchor="start" x="760" y="-712.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual void optimize()=0</text>
<text text-anchor="start" x="760" y="-701.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual void calcualteColorTree</text>
<text text-anchor="start" x="760" y="-690.5" font-family="Helvetica,sans-Serif" font-size="10.00">(LinkingUnit *lu, unsigned int expectedOut</text>
<text text-anchor="start" x="760" y="-679.5" font-family="Helvetica,sans-Serif" font-size="10.00">[], unsigned int inputs[])=0</text>
<text text-anchor="start" x="760" y="-668.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual std::vector&lt; Identifier</text>
<text text-anchor="start" x="760" y="-657.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &gt; recalculateDefinedVariables()=0</text>
</a>
</g>
</g>
<!-- Node1&#45;&gt;Node6 -->
<g id="edge5" class="edge">
<title>Node1&#45;&gt;Node6</title>
<path fill="none" stroke="midnightblue" d="M1081.21,-925.55C1048.18,-911.43 1013.99,-893.92 985,-873 963.55,-857.53 943.29,-837.58 925.71,-817.69"/>
<polygon fill="none" stroke="midnightblue" points="1079.91,-928.8 1090.49,-929.45 1082.62,-922.35 1079.91,-928.8"/>
</g>
<!-- Node8 -->
<g id="node8" class="node">
<title>Node8</title>
<g id="a_node8"><a xlink:href="class_parameter.html" target="_top" xlink:title="Modul paraméter.">
<polygon fill="white" stroke="black" points="994,-650.5 994,-817.5 1202,-817.5 1202,-650.5 994,-650.5"/>
<text text-anchor="middle" x="1098" y="-805.5" font-family="Helvetica,sans-Serif" font-size="10.00">Parameter</text>
<polyline fill="none" stroke="black" points="994,-798.5 1202,-798.5 "/>
<text text-anchor="start" x="1002" y="-786.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; enum Direction direction</text>
<text text-anchor="start" x="1002" y="-775.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; Identifier * identifier</text>
<polyline fill="none" stroke="black" points="994,-768.5 1202,-768.5 "/>
<text text-anchor="start" x="1002" y="-756.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ ~Parameter()</text>
<text text-anchor="start" x="1002" y="-745.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Parameter()</text>
<text text-anchor="start" x="1002" y="-734.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Parameter(const Parameter &amp;p)</text>
<text text-anchor="start" x="1002" y="-723.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ std::ostream &amp; printDot(std::ostream</text>
<text text-anchor="start" x="1002" y="-712.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;os) const</text>
<text text-anchor="start" x="1002" y="-701.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ enum Direction getDirection() const</text>
<text text-anchor="start" x="1002" y="-690.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ const Identifier * getIdentifier() const</text>
<text text-anchor="start" x="1002" y="-679.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void translate(const Translator</text>
<text text-anchor="start" x="1002" y="-668.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;translation)</text>
<text text-anchor="start" x="1002" y="-657.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ static Parameter * parse(Lexer &amp;lex)</text>
</a>
</g>
</g>
<!-- Node1&#45;&gt;Node8 -->
<g id="edge7" class="edge">
<title>Node1&#45;&gt;Node8</title>
<path fill="none" stroke="midnightblue" d="M1180.39,-900.48C1167.49,-874.57 1152.71,-844.89 1139.27,-817.9"/>
<polygon fill="none" stroke="midnightblue" points="1177.28,-902.09 1184.87,-909.48 1183.55,-898.97 1177.28,-902.09"/>
</g>
<!-- Node9 -->
<g id="node9" class="node">
<title>Node9</title>
<g id="a_node9"><a xlink:href="class_parameter_list.html" target="_top" xlink:title="Paraméterlista.">
<polygon fill="white" stroke="black" points="1220.5,-634 1220.5,-834 1443.5,-834 1443.5,-634 1220.5,-634"/>
<text text-anchor="middle" x="1332" y="-822" font-family="Helvetica,sans-Serif" font-size="10.00">ParameterList</text>
<polyline fill="none" stroke="black" points="1220.5,-815 1443.5,-815 "/>
<text text-anchor="start" x="1228.5" y="-803" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; std::vector&lt; ValueExpression * &gt;</text>
<text text-anchor="start" x="1228.5" y="-792" font-family="Helvetica,sans-Serif" font-size="10.00"> parameters</text>
<polyline fill="none" stroke="black" points="1220.5,-785 1443.5,-785 "/>
<text text-anchor="start" x="1228.5" y="-773" font-family="Helvetica,sans-Serif" font-size="10.00">+ ~ParameterList()</text>
<text text-anchor="start" x="1228.5" y="-762" font-family="Helvetica,sans-Serif" font-size="10.00">+ ParameterList()</text>
<text text-anchor="start" x="1228.5" y="-751" font-family="Helvetica,sans-Serif" font-size="10.00">+ ParameterList(const ParameterList &amp;pl)</text>
<text text-anchor="start" x="1228.5" y="-740" font-family="Helvetica,sans-Serif" font-size="10.00">+ std::ostream &amp; printDot(std::ostream</text>
<text text-anchor="start" x="1228.5" y="-729" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;os) const</text>
<text text-anchor="start" x="1228.5" y="-718" font-family="Helvetica,sans-Serif" font-size="10.00">+ size_t length() const</text>
<text text-anchor="start" x="1228.5" y="-707" font-family="Helvetica,sans-Serif" font-size="10.00">+ const ValueExpression * operator</text>
<text text-anchor="start" x="1228.5" y="-696" font-family="Helvetica,sans-Serif" font-size="10.00">[](size_t idx) const</text>
<text text-anchor="start" x="1228.5" y="-685" font-family="Helvetica,sans-Serif" font-size="10.00">+ void checkSemantics(CompilationUnit</text>
<text text-anchor="start" x="1228.5" y="-674" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;cu) const</text>
<text text-anchor="start" x="1228.5" y="-663" font-family="Helvetica,sans-Serif" font-size="10.00">+ void translate(const Translator</text>
<text text-anchor="start" x="1228.5" y="-652" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;translation)</text>
<text text-anchor="start" x="1228.5" y="-641" font-family="Helvetica,sans-Serif" font-size="10.00">+ static ParameterList * parse(Lexer &amp;lex)</text>
</a>
</g>
</g>
<!-- Node1&#45;&gt;Node9 -->
<g id="edge8" class="edge">
<title>Node1&#45;&gt;Node9</title>
<path fill="none" stroke="midnightblue" d="M1249.65,-900.41C1260.01,-879.6 1271.57,-856.38 1282.68,-834.06"/>
<polygon fill="none" stroke="midnightblue" points="1246.45,-898.97 1245.13,-909.48 1252.72,-902.09 1246.45,-898.97"/>
</g>
<!-- Node10 -->
<g id="node10" class="node">
<title>Node10</title>
<g id="a_node10"><a xlink:href="class_parameter_list_declaration.html" target="_top" xlink:title="Modul paramétereinek deklarálása.">
<polygon fill="white" stroke="black" points="1461.5,-639.5 1461.5,-828.5 1676.5,-828.5 1676.5,-639.5 1461.5,-639.5"/>
<text text-anchor="middle" x="1569" y="-816.5" font-family="Helvetica,sans-Serif" font-size="10.00">ParameterListDeclaration</text>
<polyline fill="none" stroke="black" points="1461.5,-809.5 1676.5,-809.5 "/>
<text text-anchor="start" x="1469.5" y="-797.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; std::vector&lt; Parameter * &gt; parameters</text>
<polyline fill="none" stroke="black" points="1461.5,-790.5 1676.5,-790.5 "/>
<text text-anchor="start" x="1469.5" y="-778.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ ~ParameterListDeclaration()</text>
<text text-anchor="start" x="1469.5" y="-767.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ std::ostream &amp; printDot(std::ostream</text>
<text text-anchor="start" x="1469.5" y="-756.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;os) const</text>
<text text-anchor="start" x="1469.5" y="-745.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ size_t length() const</text>
<text text-anchor="start" x="1469.5" y="-734.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ const Parameter * operator[](size</text>
<text text-anchor="start" x="1469.5" y="-723.5" font-family="Helvetica,sans-Serif" font-size="10.00">_t idx) const</text>
<text text-anchor="start" x="1469.5" y="-712.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Parameter * operator[](size_t idx)</text>
<text text-anchor="start" x="1469.5" y="-701.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void checkSemantics(CompilationUnit</text>
<text text-anchor="start" x="1469.5" y="-690.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;cu) const</text>
<text text-anchor="start" x="1469.5" y="-679.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void translate(const Translator</text>
<text text-anchor="start" x="1469.5" y="-668.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;translation)</text>
<text text-anchor="start" x="1469.5" y="-657.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ static ParameterListDeclaration</text>
<text text-anchor="start" x="1469.5" y="-646.5" font-family="Helvetica,sans-Serif" font-size="10.00"> * parse(Lexer &amp;lex)</text>
</a>
</g>
</g>
<!-- Node1&#45;&gt;Node10 -->
<g id="edge9" class="edge">
<title>Node1&#45;&gt;Node10</title>
<path fill="none" stroke="midnightblue" d="M1349.01,-928.12C1384.31,-913.71 1421.12,-895.42 1452,-873 1469.28,-860.45 1485.64,-844.83 1500.34,-828.66"/>
<polygon fill="none" stroke="midnightblue" points="1347.57,-924.92 1339.59,-931.89 1350.17,-931.42 1347.57,-924.92"/>
</g>
<!-- Node11 -->
<g id="node11" class="node">
<title>Node11</title>
<g id="a_node11"><a xlink:href="class_value_expression.html" target="_top" xlink:title="Base class az értéket hordozó osztályoknak.">
<polygon fill="white" stroke="black" points="1694.5,-595.5 1694.5,-872.5 1945.5,-872.5 1945.5,-595.5 1694.5,-595.5"/>
<text text-anchor="middle" x="1820" y="-860.5" font-family="Helvetica,sans-Serif" font-size="10.00">ValueExpression</text>
<polyline fill="none" stroke="black" points="1694.5,-853.5 1945.5,-853.5 "/>
<text text-anchor="start" x="1702.5" y="-841.5" font-family="Helvetica,sans-Serif" font-size="10.00"># unsigned int outColor</text>
<text text-anchor="start" x="1702.5" y="-830.5" font-family="Helvetica,sans-Serif" font-size="10.00"># unsigned int inColors</text>
<polyline fill="none" stroke="black" points="1694.5,-823.5 1945.5,-823.5 "/>
<text text-anchor="start" x="1702.5" y="-811.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ ValueExpression()</text>
<text text-anchor="start" x="1702.5" y="-800.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual ~ValueExpression()</text>
<text text-anchor="start" x="1702.5" y="-789.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual ValueExpression * clone</text>
<text text-anchor="start" x="1702.5" y="-778.5" font-family="Helvetica,sans-Serif" font-size="10.00">() const =0</text>
<text text-anchor="start" x="1702.5" y="-767.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual void optimize()=0</text>
<text text-anchor="start" x="1702.5" y="-756.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual bool isConst() const =0</text>
<text text-anchor="start" x="1702.5" y="-745.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual int calculate() const =0</text>
<text text-anchor="start" x="1702.5" y="-734.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual unsigned int getOutColor</text>
<text text-anchor="start" x="1702.5" y="-723.5" font-family="Helvetica,sans-Serif" font-size="10.00">(LinkingUnit *lu) const</text>
<text text-anchor="start" x="1702.5" y="-712.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual bool hasOutColor(LinkingUnit</text>
<text text-anchor="start" x="1702.5" y="-701.5" font-family="Helvetica,sans-Serif" font-size="10.00"> *lu) const</text>
<text text-anchor="start" x="1702.5" y="-690.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void setOutColor(unsigned int col)</text>
<text text-anchor="start" x="1702.5" y="-679.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ unsigned int getInColor(size_t index=0) const</text>
<text text-anchor="start" x="1702.5" y="-668.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ bool hasInColor(size_t index=0) const</text>
<text text-anchor="start" x="1702.5" y="-657.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void setInColor(unsigned int col,</text>
<text text-anchor="start" x="1702.5" y="-646.5" font-family="Helvetica,sans-Serif" font-size="10.00"> size_t index=0)</text>
<text text-anchor="start" x="1702.5" y="-635.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual void calculateColorTree</text>
<text text-anchor="start" x="1702.5" y="-624.5" font-family="Helvetica,sans-Serif" font-size="10.00">(LinkingUnit *lu, unsigned int expectedOut)=0</text>
<text text-anchor="start" x="1702.5" y="-613.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual void translate(const Translator</text>
<text text-anchor="start" x="1702.5" y="-602.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;translation)=0</text>
</a>
</g>
</g>
<!-- Node1&#45;&gt;Node11 -->
<g id="edge10" class="edge">
<title>Node1&#45;&gt;Node11</title>
<path fill="none" stroke="midnightblue" d="M1349.58,-963.19C1447.69,-953.4 1581.08,-929.76 1685,-873 1688.09,-871.31 1691.15,-869.53 1694.18,-867.67"/>
<polygon fill="none" stroke="midnightblue" points="1349.22,-959.71 1339.6,-964.15 1349.89,-966.68 1349.22,-959.71"/>
</g>
<!-- Node3 -->
<g id="node3" class="node">
<title>Node3</title>
<g id="a_node3"><a xlink:href="class_assignment.html" target="_top" xlink:title="Értékadás.">
<polygon fill="white" stroke="black" points="0,-342 0,-531 224,-531 224,-342 0,-342"/>
<text text-anchor="middle" x="112" y="-519" font-family="Helvetica,sans-Serif" font-size="10.00">Assignment</text>
<polyline fill="none" stroke="black" points="0,-512 224,-512 "/>
<text text-anchor="start" x="8" y="-500" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; Identifier * to</text>
<text text-anchor="start" x="8" y="-489" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; ValueExpression * val</text>
<polyline fill="none" stroke="black" points="0,-482 224,-482 "/>
<text text-anchor="start" x="8" y="-470" font-family="Helvetica,sans-Serif" font-size="10.00">+ ~Assignment()</text>
<text text-anchor="start" x="8" y="-459" font-family="Helvetica,sans-Serif" font-size="10.00">+ std::ostream &amp; printDot(std::ostream</text>
<text text-anchor="start" x="8" y="-448" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;os) const</text>
<text text-anchor="start" x="8" y="-437" font-family="Helvetica,sans-Serif" font-size="10.00">+ void checkSemantics(CompilationUnit</text>
<text text-anchor="start" x="8" y="-426" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;cu) const</text>
<text text-anchor="start" x="8" y="-415" font-family="Helvetica,sans-Serif" font-size="10.00">+ void optimize()</text>
<text text-anchor="start" x="8" y="-404" font-family="Helvetica,sans-Serif" font-size="10.00">+ void calculateColorTree(LinkingUnit *lu)</text>
<text text-anchor="start" x="8" y="-393" font-family="Helvetica,sans-Serif" font-size="10.00">+ AsyncExpression * clone() const</text>
<text text-anchor="start" x="8" y="-382" font-family="Helvetica,sans-Serif" font-size="10.00">+ void translate(const Translator</text>
<text text-anchor="start" x="8" y="-371" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;translation)</text>
<text text-anchor="start" x="8" y="-360" font-family="Helvetica,sans-Serif" font-size="10.00">+ EID addToBlueprint(Blueprint &amp;bp) const</text>
<text text-anchor="start" x="8" y="-349" font-family="Helvetica,sans-Serif" font-size="10.00">+ static Assignment * parse(Lexer &amp;lex)</text>
</a>
</g>
</g>
<!-- Node2&#45;&gt;Node3 -->
<g id="edge2" class="edge">
<title>Node2&#45;&gt;Node3</title>
<path fill="none" stroke="midnightblue" d="M399.55,-667.41C346.22,-637.23 284.57,-599.23 233,-559 221.97,-550.39 210.91,-540.85 200.2,-531.01"/>
<polygon fill="none" stroke="midnightblue" points="397.95,-670.52 408.38,-672.37 401.38,-664.42 397.95,-670.52"/>
</g>
<!-- Node4 -->
<g id="node4" class="node">
<title>Node4</title>
<g id="a_node4"><a xlink:href="class_module_connection.html" target="_top" xlink:title="Modul csatlakoztatás.">
<polygon fill="white" stroke="black" points="242,-331 242,-542 514,-542 514,-331 242,-331"/>
<text text-anchor="middle" x="378" y="-530" font-family="Helvetica,sans-Serif" font-size="10.00">ModuleConnection</text>
<polyline fill="none" stroke="black" points="242,-523 514,-523 "/>
<text text-anchor="start" x="250" y="-511" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; Identifier * identifier</text>
<text text-anchor="start" x="250" y="-500" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; ParameterList * parameters</text>
<polyline fill="none" stroke="black" points="242,-493 514,-493 "/>
<text text-anchor="start" x="250" y="-481" font-family="Helvetica,sans-Serif" font-size="10.00">+ ModuleConnection(const ModuleConnection &amp;mc)</text>
<text text-anchor="start" x="250" y="-470" font-family="Helvetica,sans-Serif" font-size="10.00">+ AsyncExpression * clone() const</text>
<text text-anchor="start" x="250" y="-459" font-family="Helvetica,sans-Serif" font-size="10.00">+ ~ModuleConnection()</text>
<text text-anchor="start" x="250" y="-448" font-family="Helvetica,sans-Serif" font-size="10.00">+ std::ostream &amp; printDot(std::ostream</text>
<text text-anchor="start" x="250" y="-437" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;os) const</text>
<text text-anchor="start" x="250" y="-426" font-family="Helvetica,sans-Serif" font-size="10.00">+ void checkSemantics(CompilationUnit</text>
<text text-anchor="start" x="250" y="-415" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;cu) const</text>
<text text-anchor="start" x="250" y="-404" font-family="Helvetica,sans-Serif" font-size="10.00">+ const Identifier * getIdentifier() const</text>
<text text-anchor="start" x="250" y="-393" font-family="Helvetica,sans-Serif" font-size="10.00">+ ParameterList * getParameters()</text>
<text text-anchor="start" x="250" y="-382" font-family="Helvetica,sans-Serif" font-size="10.00">+ void translate(const Translator</text>
<text text-anchor="start" x="250" y="-371" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;translation)</text>
<text text-anchor="start" x="250" y="-360" font-family="Helvetica,sans-Serif" font-size="10.00">+ static ModuleConnection * parse</text>
<text text-anchor="start" x="250" y="-349" font-family="Helvetica,sans-Serif" font-size="10.00">(Lexer &amp;lex)</text>
<text text-anchor="start" x="250" y="-338" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; ModuleConnection()</text>
</a>
</g>
</g>
<!-- Node2&#45;&gt;Node4 -->
<g id="edge3" class="edge">
<title>Node2&#45;&gt;Node4</title>
<path fill="none" stroke="midnightblue" d="M490.42,-663.5C472.45,-627.36 450.1,-582.43 430.08,-542.19"/>
<polygon fill="none" stroke="midnightblue" points="487.31,-665.09 494.9,-672.49 493.58,-661.98 487.31,-665.09"/>
</g>
<!-- Node5 -->
<g id="node5" class="node">
<title>Node5</title>
<g id="a_node5"><a xlink:href="class_variable_declaration.html" target="_top" xlink:title="Változó(k) deklarálása.">
<polygon fill="white" stroke="black" points="532.5,-342 532.5,-531 811.5,-531 811.5,-342 532.5,-342"/>
<text text-anchor="middle" x="672" y="-519" font-family="Helvetica,sans-Serif" font-size="10.00">VariableDeclaration</text>
<polyline fill="none" stroke="black" points="532.5,-512 811.5,-512 "/>
<text text-anchor="start" x="540.5" y="-500" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; std::vector&lt; Identifier * &gt; varsDeclared</text>
<polyline fill="none" stroke="black" points="532.5,-493 811.5,-493 "/>
<text text-anchor="start" x="540.5" y="-481" font-family="Helvetica,sans-Serif" font-size="10.00">+ AsyncExpression * clone() const</text>
<text text-anchor="start" x="540.5" y="-470" font-family="Helvetica,sans-Serif" font-size="10.00">+ ~VariableDeclaration()</text>
<text text-anchor="start" x="540.5" y="-459" font-family="Helvetica,sans-Serif" font-size="10.00">+ std::vector&lt; Identifier * &gt; &amp; getDeclaredVariables()</text>
<text text-anchor="start" x="540.5" y="-448" font-family="Helvetica,sans-Serif" font-size="10.00">+ std::ostream &amp; printDot(std::ostream</text>
<text text-anchor="start" x="540.5" y="-437" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;os) const</text>
<text text-anchor="start" x="540.5" y="-426" font-family="Helvetica,sans-Serif" font-size="10.00">+ void checkSemantics(CompilationUnit</text>
<text text-anchor="start" x="540.5" y="-415" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;cu) const</text>
<text text-anchor="start" x="540.5" y="-404" font-family="Helvetica,sans-Serif" font-size="10.00">+ void translate(const Translator</text>
<text text-anchor="start" x="540.5" y="-393" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;translation)</text>
<text text-anchor="start" x="540.5" y="-382" font-family="Helvetica,sans-Serif" font-size="10.00">+ static VariableDeclaration * parse</text>
<text text-anchor="start" x="540.5" y="-371" font-family="Helvetica,sans-Serif" font-size="10.00">(Lexer &amp;lex)</text>
<text text-anchor="start" x="540.5" y="-360" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; VariableDeclaration()</text>
<text text-anchor="start" x="540.5" y="-349" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; VariableDeclaration(const VariableDeclaration &amp;vd)</text>
</a>
</g>
</g>
<!-- Node2&#45;&gt;Node5 -->
<g id="edge4" class="edge">
<title>Node2&#45;&gt;Node5</title>
<path fill="none" stroke="midnightblue" d="M559.72,-663.21C579.34,-623.76 604.14,-573.91 625.43,-531.11"/>
<polygon fill="none" stroke="midnightblue" points="556.42,-661.98 555.1,-672.49 562.69,-665.09 556.42,-661.98"/>
</g>
<!-- Node7 -->
<g id="node7" class="node">
<title>Node7</title>
<g id="a_node7"><a xlink:href="class_async_module.html" target="_top" xlink:title="Aszinkron modul.">
<polygon fill="white" stroke="black" points="829.5,-314.5 829.5,-558.5 1080.5,-558.5 1080.5,-314.5 829.5,-314.5"/>
<text text-anchor="middle" x="955" y="-546.5" font-family="Helvetica,sans-Serif" font-size="10.00">AsyncModule</text>
<polyline fill="none" stroke="black" points="829.5,-539.5 1080.5,-539.5 "/>
<text text-anchor="start" x="837.5" y="-527.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; std::vector&lt; AsyncExpression * &gt;</text>
<text text-anchor="start" x="837.5" y="-516.5" font-family="Helvetica,sans-Serif" font-size="10.00"> expressions</text>
<polyline fill="none" stroke="black" points="829.5,-509.5 1080.5,-509.5 "/>
<text text-anchor="start" x="837.5" y="-497.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ ~AsyncModule()</text>
<text text-anchor="start" x="837.5" y="-486.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ std::ostream &amp; printDot(std::ostream</text>
<text text-anchor="start" x="837.5" y="-475.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;os) const</text>
<text text-anchor="start" x="837.5" y="-464.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void checkSemantics(CompilationUnit</text>
<text text-anchor="start" x="837.5" y="-453.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;cu) const</text>
<text text-anchor="start" x="837.5" y="-442.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void optimize()</text>
<text text-anchor="start" x="837.5" y="-431.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void calcualteColorTree(LinkingUnit</text>
<text text-anchor="start" x="837.5" y="-420.5" font-family="Helvetica,sans-Serif" font-size="10.00"> *lu, unsigned int expectedOut[], unsigned</text>
<text text-anchor="start" x="837.5" y="-409.5" font-family="Helvetica,sans-Serif" font-size="10.00"> int inputs[])</text>
<text text-anchor="start" x="837.5" y="-398.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ std::vector&lt; AsyncExpression * &gt;</text>
<text text-anchor="start" x="837.5" y="-387.5" font-family="Helvetica,sans-Serif" font-size="10.00"> linkModule(const Translator &amp;translation) const</text>
<text text-anchor="start" x="837.5" y="-376.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ AsyncModule * link(std::map&lt; const</text>
<text text-anchor="start" x="837.5" y="-365.5" font-family="Helvetica,sans-Serif" font-size="10.00"> Identifier, Module * &gt; &amp;modules)</text>
<text text-anchor="start" x="837.5" y="-354.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ EID addToBlueprint(Blueprint &amp;bp) const</text>
<text text-anchor="start" x="837.5" y="-343.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ std::vector&lt; Identifier &gt; recalculateDefined</text>
<text text-anchor="start" x="837.5" y="-332.5" font-family="Helvetica,sans-Serif" font-size="10.00">Variables()</text>
<text text-anchor="start" x="837.5" y="-321.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ static AsyncModule * parse(Lexer &amp;lex)</text>
</a>
</g>
</g>
<!-- Node6&#45;&gt;Node7 -->
<g id="edge6" class="edge">
<title>Node6&#45;&gt;Node7</title>
<path fill="none" stroke="midnightblue" d="M892.49,-640.49C900.48,-614.54 909.29,-585.93 917.71,-558.58"/>
<polygon fill="none" stroke="midnightblue" points="889.07,-639.71 889.47,-650.29 895.76,-641.77 889.07,-639.71"/>
</g>
<!-- Node12 -->
<g id="node12" class="node">
<title>Node12</title>
<g id="a_node12"><a xlink:href="class_binary_expression.html" target="_top" xlink:title="2 operandusú műveletek base class&#45;a">
<polygon fill="white" stroke="black" points="1425.5,-336.5 1425.5,-536.5 1676.5,-536.5 1676.5,-336.5 1425.5,-336.5"/>
<text text-anchor="middle" x="1551" y="-524.5" font-family="Helvetica,sans-Serif" font-size="10.00">BinaryExpression</text>
<polyline fill="none" stroke="black" points="1425.5,-517.5 1676.5,-517.5 "/>
<text text-anchor="start" x="1433.5" y="-505.5" font-family="Helvetica,sans-Serif" font-size="10.00"># ValueExpression * left</text>
<text text-anchor="start" x="1433.5" y="-494.5" font-family="Helvetica,sans-Serif" font-size="10.00"># ValueExpression * right</text>
<text text-anchor="start" x="1433.5" y="-483.5" font-family="Helvetica,sans-Serif" font-size="10.00"># BinaryOperator op</text>
<polyline fill="none" stroke="black" points="1425.5,-476.5 1676.5,-476.5 "/>
<text text-anchor="start" x="1433.5" y="-464.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ BinaryExpression()</text>
<text text-anchor="start" x="1433.5" y="-453.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ BinaryExpression(const BinaryExpression &amp;b)</text>
<text text-anchor="start" x="1433.5" y="-442.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual ~BinaryExpression()</text>
<text text-anchor="start" x="1433.5" y="-431.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void checkSemantics(CompilationUnit</text>
<text text-anchor="start" x="1433.5" y="-420.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;cu) const</text>
<text text-anchor="start" x="1433.5" y="-409.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void optimize()</text>
<text text-anchor="start" x="1433.5" y="-398.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ bool isConst() const</text>
<text text-anchor="start" x="1433.5" y="-387.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void calculateColorTree(LinkingUnit</text>
<text text-anchor="start" x="1433.5" y="-376.5" font-family="Helvetica,sans-Serif" font-size="10.00"> *lu, unsigned int expectedOut)</text>
<text text-anchor="start" x="1433.5" y="-365.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void translate(const Translator</text>
<text text-anchor="start" x="1433.5" y="-354.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;translation)</text>
<text text-anchor="start" x="1433.5" y="-343.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ EID addToBlueprint(Blueprint &amp;bp) const</text>
</a>
</g>
</g>
<!-- Node11&#45;&gt;Node12 -->
<g id="edge11" class="edge">
<title>Node11&#45;&gt;Node12</title>
<path fill="none" stroke="midnightblue" d="M1687.82,-587.8C1672.09,-570.52 1656.32,-553.19 1641.36,-536.77"/>
<polygon fill="none" stroke="midnightblue" points="1685.24,-590.16 1694.56,-595.2 1690.41,-585.45 1685.24,-590.16"/>
</g>
<!-- Node16 -->
<g id="node16" class="node">
<title>Node16</title>
<g id="a_node16"><a xlink:href="class_unary_expression.html" target="_top" xlink:title="Unáris operátor.">
<polygon fill="white" stroke="black" points="1697,-314.5 1697,-558.5 1943,-558.5 1943,-314.5 1697,-314.5"/>
<text text-anchor="middle" x="1820" y="-546.5" font-family="Helvetica,sans-Serif" font-size="10.00">UnaryExpression</text>
<polyline fill="none" stroke="black" points="1697,-539.5 1943,-539.5 "/>
<text text-anchor="start" x="1705" y="-527.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ enum Operator op</text>
<text text-anchor="start" x="1705" y="-516.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ ValueExpression * expr</text>
<polyline fill="none" stroke="black" points="1697,-509.5 1943,-509.5 "/>
<text text-anchor="start" x="1705" y="-497.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ UnaryExpression()</text>
<text text-anchor="start" x="1705" y="-486.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ UnaryExpression(const UnaryExpression &amp;u)</text>
<text text-anchor="start" x="1705" y="-475.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ ValueExpression * clone() const</text>
<text text-anchor="start" x="1705" y="-464.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ ~UnaryExpression()</text>
<text text-anchor="start" x="1705" y="-453.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ std::ostream &amp; printDot(std::ostream</text>
<text text-anchor="start" x="1705" y="-442.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;os) const</text>
<text text-anchor="start" x="1705" y="-431.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void checkSemantics(CompilationUnit</text>
<text text-anchor="start" x="1705" y="-420.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;cu) const</text>
<text text-anchor="start" x="1705" y="-409.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void optimize()</text>
<text text-anchor="start" x="1705" y="-398.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ bool isConst() const</text>
<text text-anchor="start" x="1705" y="-387.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ int calculate() const</text>
<text text-anchor="start" x="1705" y="-376.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void calculateColorTree(LinkingUnit</text>
<text text-anchor="start" x="1705" y="-365.5" font-family="Helvetica,sans-Serif" font-size="10.00"> *lu, unsigned int expected)</text>
<text text-anchor="start" x="1705" y="-354.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void translate(const Translator</text>
<text text-anchor="start" x="1705" y="-343.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;translation)</text>
<text text-anchor="start" x="1705" y="-332.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ EID addToBlueprint(Blueprint &amp;bp) const</text>
<text text-anchor="start" x="1705" y="-321.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ static ValueExpression * parse(Lexer &amp;lex)</text>
</a>
</g>
</g>
<!-- Node11&#45;&gt;Node16 -->
<g id="edge15" class="edge">
<title>Node11&#45;&gt;Node16</title>
<path fill="none" stroke="midnightblue" d="M1820,-585.19C1820,-576.31 1820,-567.44 1820,-558.7"/>
<polygon fill="none" stroke="midnightblue" points="1816.5,-585.2 1820,-595.2 1823.5,-585.2 1816.5,-585.2"/>
</g>
<!-- Node17 -->
<g id="node17" class="node">
<title>Node17</title>
<g id="a_node17"><a xlink:href="class_value.html" target="_top" xlink:title="Érték.">
<polygon fill="white" stroke="black" points="1962,-402.5 1962,-470.5 2144,-470.5 2144,-402.5 1962,-402.5"/>
<text text-anchor="middle" x="2053" y="-458.5" font-family="Helvetica,sans-Serif" font-size="10.00">Value</text>
<polyline fill="none" stroke="black" points="1962,-451.5 2144,-451.5 "/>
<text text-anchor="middle" x="2053" y="-439.5" font-family="Helvetica,sans-Serif" font-size="10.00"> </text>
<polyline fill="none" stroke="black" points="1962,-432.5 2144,-432.5 "/>
<text text-anchor="start" x="1970" y="-420.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ virtual ~Value()</text>
<text text-anchor="start" x="1970" y="-409.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ static Value * parse(Lexer &amp;lex)</text>
</a>
</g>
</g>
<!-- Node11&#45;&gt;Node17 -->
<g id="edge16" class="edge">
<title>Node11&#45;&gt;Node17</title>
<path fill="none" stroke="midnightblue" d="M1934.87,-587.32C1969.41,-543.51 2004.14,-499.47 2026.91,-470.58"/>
<polygon fill="none" stroke="midnightblue" points="1932.1,-585.18 1928.66,-595.2 1937.6,-589.51 1932.1,-585.18"/>
</g>
<!-- Node13 -->
<g id="node13" class="node">
<title>Node13</title>
<g id="a_node13"><a xlink:href="class_expression.html" target="_top" xlink:title="Egyes precendenciaszintű művelet.">
<polygon fill="white" stroke="black" points="1177,-77.5 1177,-200.5 1413,-200.5 1413,-77.5 1177,-77.5"/>
<text text-anchor="middle" x="1295" y="-188.5" font-family="Helvetica,sans-Serif" font-size="10.00">Expression</text>
<polyline fill="none" stroke="black" points="1177,-181.5 1413,-181.5 "/>
<text text-anchor="middle" x="1295" y="-169.5" font-family="Helvetica,sans-Serif" font-size="10.00"> </text>
<polyline fill="none" stroke="black" points="1177,-162.5 1413,-162.5 "/>
<text text-anchor="start" x="1185" y="-150.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Expression()</text>
<text text-anchor="start" x="1185" y="-139.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Expression(const Expression &amp;e)</text>
<text text-anchor="start" x="1185" y="-128.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ ValueExpression * clone() const</text>
<text text-anchor="start" x="1185" y="-117.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ std::ostream &amp; printDot(std::ostream</text>
<text text-anchor="start" x="1185" y="-106.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;os) const</text>
<text text-anchor="start" x="1185" y="-95.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ int calculate() const</text>
<text text-anchor="start" x="1185" y="-84.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ static ValueExpression * parse(Lexer &amp;lex)</text>
</a>
</g>
</g>
<!-- Node12&#45;&gt;Node13 -->
<g id="edge12" class="edge">
<title>Node12&#45;&gt;Node13</title>
<path fill="none" stroke="midnightblue" d="M1458.38,-328.58C1421.08,-285.53 1379.43,-237.46 1347.52,-200.63"/>
<polygon fill="none" stroke="midnightblue" points="1455.85,-331.01 1465.04,-336.28 1461.14,-326.43 1455.85,-331.01"/>
</g>
<!-- Node14 -->
<g id="node14" class="node">
<title>Node14</title>
<g id="a_node14"><a xlink:href="class_factor.html" target="_top" xlink:title="Hármas precedenciaszintű művelet.">
<polygon fill="white" stroke="black" points="1431,-77.5 1431,-200.5 1667,-200.5 1667,-77.5 1431,-77.5"/>
<text text-anchor="middle" x="1549" y="-188.5" font-family="Helvetica,sans-Serif" font-size="10.00">Factor</text>
<polyline fill="none" stroke="black" points="1431,-181.5 1667,-181.5 "/>
<text text-anchor="middle" x="1549" y="-169.5" font-family="Helvetica,sans-Serif" font-size="10.00"> </text>
<polyline fill="none" stroke="black" points="1431,-162.5 1667,-162.5 "/>
<text text-anchor="start" x="1439" y="-150.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Factor(const Factor &amp;f)</text>
<text text-anchor="start" x="1439" y="-139.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ ValueExpression * clone() const</text>
<text text-anchor="start" x="1439" y="-128.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ std::ostream &amp; printDot(std::ostream</text>
<text text-anchor="start" x="1439" y="-117.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;os) const</text>
<text text-anchor="start" x="1439" y="-106.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ int calculate() const</text>
<text text-anchor="start" x="1439" y="-95.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ static ValueExpression * parse(Lexer &amp;lex)</text>
<text text-anchor="start" x="1439" y="-84.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; Factor()</text>
</a>
</g>
</g>
<!-- Node12&#45;&gt;Node14 -->
<g id="edge13" class="edge">
<title>Node12&#45;&gt;Node14</title>
<path fill="none" stroke="midnightblue" d="M1550.26,-326.17C1549.97,-283.75 1549.65,-236.78 1549.41,-200.63"/>
<polygon fill="none" stroke="midnightblue" points="1546.76,-326.3 1550.33,-336.28 1553.76,-326.26 1546.76,-326.3"/>
</g>
<!-- Node15 -->
<g id="node15" class="node">
<title>Node15</title>
<g id="a_node15"><a xlink:href="class_term.html" target="_top" xlink:title="Kettes precedenciaszintű művelet.">
<polygon fill="white" stroke="black" points="1685,-77.5 1685,-200.5 1921,-200.5 1921,-77.5 1685,-77.5"/>
<text text-anchor="middle" x="1803" y="-188.5" font-family="Helvetica,sans-Serif" font-size="10.00">Term</text>
<polyline fill="none" stroke="black" points="1685,-181.5 1921,-181.5 "/>
<text text-anchor="middle" x="1803" y="-169.5" font-family="Helvetica,sans-Serif" font-size="10.00"> </text>
<polyline fill="none" stroke="black" points="1685,-162.5 1921,-162.5 "/>
<text text-anchor="start" x="1693" y="-150.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Term()</text>
<text text-anchor="start" x="1693" y="-139.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Term(const Term &amp;t)</text>
<text text-anchor="start" x="1693" y="-128.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ ValueExpression * clone() const</text>
<text text-anchor="start" x="1693" y="-117.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ std::ostream &amp; printDot(std::ostream</text>
<text text-anchor="start" x="1693" y="-106.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;os) const</text>
<text text-anchor="start" x="1693" y="-95.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ int calculate() const</text>
<text text-anchor="start" x="1693" y="-84.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ static ValueExpression * parse(Lexer &amp;lex)</text>
</a>
</g>
</g>
<!-- Node12&#45;&gt;Node15 -->
<g id="edge14" class="edge">
<title>Node12&#45;&gt;Node15</title>
<path fill="none" stroke="midnightblue" d="M1642.18,-328.58C1678.89,-285.53 1719.88,-237.46 1751.3,-200.63"/>
<polygon fill="none" stroke="midnightblue" points="1639.44,-326.4 1635.61,-336.28 1644.77,-330.94 1639.44,-326.4"/>
</g>
<!-- Node18 -->
<g id="node18" class="node">
<title>Node18</title>
<g id="a_node18"><a xlink:href="class_identifier.html" target="_top" xlink:title="Azonosító">
<polygon fill="white" stroke="black" points="1939.5,-0.5 1939.5,-277.5 2166.5,-277.5 2166.5,-0.5 1939.5,-0.5"/>
<text text-anchor="middle" x="2053" y="-265.5" font-family="Helvetica,sans-Serif" font-size="10.00">Identifier</text>
<polyline fill="none" stroke="black" points="1939.5,-258.5 2166.5,-258.5 "/>
<text text-anchor="start" x="1947.5" y="-246.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; std::string name</text>
<polyline fill="none" stroke="black" points="1939.5,-239.5 2166.5,-239.5 "/>
<text text-anchor="start" x="1947.5" y="-227.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Identifier()</text>
<text text-anchor="start" x="1947.5" y="-216.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Identifier(std::string name)</text>
<text text-anchor="start" x="1947.5" y="-205.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ Identifier(const Identifier &amp;i)</text>
<text text-anchor="start" x="1947.5" y="-194.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ ValueExpression * clone() const</text>
<text text-anchor="start" x="1947.5" y="-183.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ std::ostream &amp; printDot(std::ostream</text>
<text text-anchor="start" x="1947.5" y="-172.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;os) const</text>
<text text-anchor="start" x="1947.5" y="-161.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ const std::string &amp; getName() const</text>
<text text-anchor="start" x="1947.5" y="-150.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ bool operator&lt;(const Identifier &amp;b) const</text>
<text text-anchor="start" x="1947.5" y="-139.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void checkSemantics(CompilationUnit</text>
<text text-anchor="start" x="1947.5" y="-128.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;cu) const</text>
<text text-anchor="start" x="1947.5" y="-117.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void optimize()</text>
<text text-anchor="start" x="1947.5" y="-106.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ bool isConst() const</text>
<text text-anchor="start" x="1947.5" y="-95.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ int calculate() const</text>
<text text-anchor="start" x="1947.5" y="-84.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void calculateColorTree(LinkingUnit</text>
<text text-anchor="start" x="1947.5" y="-73.5" font-family="Helvetica,sans-Serif" font-size="10.00"> *lu, unsigned int expected)</text>
<text text-anchor="start" x="1947.5" y="-62.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ bool hasOutColor(LinkingUnit *lu) const</text>
<text text-anchor="start" x="1947.5" y="-51.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ unsigned int getOutColor(LinkingUnit</text>
<text text-anchor="start" x="1947.5" y="-40.5" font-family="Helvetica,sans-Serif" font-size="10.00"> *lu) const</text>
<text text-anchor="start" x="1947.5" y="-29.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ void translate(const Translator</text>
<text text-anchor="start" x="1947.5" y="-18.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;translation)</text>
<text text-anchor="start" x="1947.5" y="-7.5" font-family="Helvetica,sans-Serif" font-size="10.00">+ static Identifier * parse(Lexer &amp;lex)</text>
</a>
</g>
</g>
<!-- Node17&#45;&gt;Node18 -->
<g id="edge17" class="edge">
<title>Node17&#45;&gt;Node18</title>
<path fill="none" stroke="midnightblue" d="M2053,-392.22C2053,-361.76 2053,-319.17 2053,-277.65"/>
<polygon fill="none" stroke="midnightblue" points="2049.5,-392.46 2053,-402.46 2056.5,-392.46 2049.5,-392.46"/>
</g>
<!-- Node19 -->
<g id="node19" class="node">
<title>Node19</title>
<g id="a_node19"><a xlink:href="class_number.html" target="_top" xlink:title="Konstans számérték.">
<polygon fill="white" stroke="black" points="2185,-50 2185,-228 2393,-228 2393,-50 2185,-50"/>
<text text-anchor="middle" x="2289" y="-216" font-family="Helvetica,sans-Serif" font-size="10.00">Number</text>
<polyline fill="none" stroke="black" points="2185,-209 2393,-209 "/>
<text text-anchor="start" x="2193" y="-197" font-family="Helvetica,sans-Serif" font-size="10.00">&#45; int value</text>
<polyline fill="none" stroke="black" points="2185,-190 2393,-190 "/>
<text text-anchor="start" x="2193" y="-178" font-family="Helvetica,sans-Serif" font-size="10.00">+ Number(int val)</text>
<text text-anchor="start" x="2193" y="-167" font-family="Helvetica,sans-Serif" font-size="10.00">+ ValueExpression * clone() const</text>
<text text-anchor="start" x="2193" y="-156" font-family="Helvetica,sans-Serif" font-size="10.00">+ std::ostream &amp; printDot(std::ostream</text>
<text text-anchor="start" x="2193" y="-145" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;os) const</text>
<text text-anchor="start" x="2193" y="-134" font-family="Helvetica,sans-Serif" font-size="10.00">+ void optimize()</text>
<text text-anchor="start" x="2193" y="-123" font-family="Helvetica,sans-Serif" font-size="10.00">+ bool isConst() const</text>
<text text-anchor="start" x="2193" y="-112" font-family="Helvetica,sans-Serif" font-size="10.00">+ int calculate() const</text>
<text text-anchor="start" x="2193" y="-101" font-family="Helvetica,sans-Serif" font-size="10.00">+ void calculateColorTree(LinkingUnit</text>
<text text-anchor="start" x="2193" y="-90" font-family="Helvetica,sans-Serif" font-size="10.00"> *lu, unsigned int expected)</text>
<text text-anchor="start" x="2193" y="-79" font-family="Helvetica,sans-Serif" font-size="10.00">+ void translate(const Translator</text>
<text text-anchor="start" x="2193" y="-68" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp;translation)</text>
<text text-anchor="start" x="2193" y="-57" font-family="Helvetica,sans-Serif" font-size="10.00">+ static Number * parse(Lexer &amp;lex)</text>
</a>
</g>
</g>
<!-- Node17&#45;&gt;Node19 -->
<g id="edge18" class="edge">
<title>Node17&#45;&gt;Node19</title>
<path fill="none" stroke="midnightblue" d="M2085.73,-394.52C2119.91,-351.72 2174.59,-283.26 2218.62,-228.12"/>
<polygon fill="none" stroke="midnightblue" points="2082.89,-392.46 2079.39,-402.46 2088.36,-396.83 2082.89,-392.46"/>
</g>
</g>
</svg>
